:class SecureRandom
  :is Random

  :const _chunk USize: 256
  :const _limit USize: 2048
  :let _buffer: Bytes.new(@_limit)
  :var _offset USize: 0

  :new: @_grab_random_bytes

  :fun ref u64 U64
    // TODO: replace `while True` with `loop`.
    while True (
      // `read_native_u64!` will throw an error when there aren't enough bytes in the buffer.
      try (
        res = @_buffer.read_native_u64!(@_offset)
        @_offset += 8
        return res
      |
        @_grab_random_bytes
      )
    )

    0 // Just to appease the type checker, this will never return 0.

  :fun ref u32 U32
    // TODO: replace `while True` with `loop`.
    while True (
      try (
        res = @_buffer.read_native_u32!(@_offset)
        @_offset += 4
        return res
      |
        @_grab_random_bytes
      )
    )

    0

  :fun ref u16 U16
    // TODO: replace `while True` with `loop`.
    while True (
      try (
        res = @_buffer.read_native_u16!(@_offset)
        @_offset += 2
        return res
      |
        @_grab_random_bytes
      )
    )

    0

  :fun ref u8 U8
    // TODO: replace `while True` with `loop`.
    while True (
      try (
        res = @_buffer.read_byte!(@_offset)
        @_offset += 1
        return res
      |
        @_grab_random_bytes
      )
    )

    0

  // This method will deal with different platforms by selecting the
  // appropriate secure random primitive.
  :fun ref _grab_random_bytes
    @_buffer.resize_possibly_including_uninitialized_memory(@_chunk)

    (@_limit / @_chunk).times -> (i |
      _FFI.getentropy(@_buffer.cpointer(i * @_chunk), @_chunk)
    )

    @_offset = 0
